import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState } from '../../app/store';
import { _getQuestions } from '../../utils/_DATA';
import Question from '../../utils/question';

export interface QuestionsState {
    questions: Question[];
    status: 'idle' | 'loading' | 'failed';
}

const initialState: QuestionsState = {
    questions: [],
    status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const fetchQuestions = createAsyncThunk(
    'questions/fetchQuestions',
    async () => {
        const response = await _getQuestions();
        return response.questions;
    }
);

export const questionsSlice = createSlice({
    name: 'questions',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    extraReducers: (builder) => {
        builder
            .addCase(fetchQuestions.pending, (state) => {
                state.status = 'loading';
            })
            .addCase(fetchQuestions.fulfilled, (state, action: PayloadAction<{ [key: string]: Question }>) => {
                state.status = 'idle';
                const questionsArray = Object.values(action.payload).map((question) => question);

                questionsArray.forEach((question) => {
                    console.group(`Question: ${question.id}`);
                    console.log(`Otion one: ${question.optionOne.text}`);
                    console.log(`Otion two: ${question.optionTwo.text}`);
                    console.groupEnd();
                });

                state.questions = questionsArray;
            })
            .addCase(fetchQuestions.rejected, (state) => {
                state.status = 'failed';
            });
    },
});

export const status = (state: RootState) => state.questions.status;
export const allQuestions = (state: RootState) => state.questions.questions;

export const newQuestions = (state: RootState) => state.questions.questions.filter((question) => [...question.optionOne.votes, ...question.optionTwo.votes]
    .filter((vote) => vote !== (state.authedUser.user?.id ?? "")));

    export const answeredQuestions = (state: RootState) => state.questions.questions.filter((question) => [...question.optionOne.votes, ...question.optionTwo.votes]
    .filter((vote) => vote === (state.authedUser.user?.id ?? "")));

export default questionsSlice.reducer;
